import telebot
import json, os
from telebot import types
import ParserHTML


bot = telebot.TeleBot(os.environ.get('TRANSPORT_TGBOT_TOKEN'))


def markup_Reply_transport_button():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    bus_button = types.KeyboardButton("–ê–≤—Ç–æ–±—É—Å")
    tramway_button = types.KeyboardButton("–¢—Ä–∞–º–≤–∞–π")
    trolleybus_button = types.KeyboardButton("–¢—Ä–æ–ª–ª–µ–π–±—É—Å")
    button_back = types.KeyboardButton("–í –Ω–∞—á–∞–ª–æ")
    markup.add(button_back)
    markup.row(bus_button, trolleybus_button, tramway_button)
    return markup

def markup_Reply_num_transport_button(type_transport):
    with open(f"data/{type_transport}.json") as file:
        data = json.load(file)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    button_back = types.KeyboardButton("–ù–∞–∑–∞–¥")
    markup.add(button_back)
    button_list = []
    for i in data['response']:
        button = types.KeyboardButton(i)
        button_list.append(button)
    markup.row(*button_list)
    return markup

def text_data_transport_position(dict):
    if(len(dict)>0):
        output_str = []
        output_str.append(f'üîú–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç {dict[0]["EndStops"]}')
        for item in dict:
            if(item['Orient'] == 'forward'):
                if(item["Park"] == True):
                    if(item["Position"] == 'Between_Stops'):
                        str_data = f'‚ùå–ü–µ—Ä–µ–¥ –æ—Å—Ç. {item["Stops"]}. ‚ùó–í –ø–∞—Ä–∫ {item["EndStops"]}'
                    if (item["Position"] == "Stops"): str_data = f'‚ùå–û—Å—Ç. {item["Stops"]}. ‚ùó–í –ø–∞—Ä–∫ {item["EndStops"]}'
                    output_str.append(str_data)
                else:
                    if (item["Position"] == 'Between_Stops'):
                        str_data = f'‚¨áÔ∏è–ü–µ—Ä–µ–¥ –æ—Å—Ç. {item["Stops"]}'
                    if (item["Position"] == "Stops"): str_data = f'‚¨á–û—Å—Ç. {item["Stops"]}.'
                    output_str.append(str_data)
        output_str.append('\n')
        output_str.append(f'üîô–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç {dict[len(dict)-1]["EndStops"]}')
        for item in dict:
            if(item['Orient'] == 'back'):
                if (item["Park"] == True):
                    if (item["Position"] == 'Between_Stops'):
                        str_data = f'‚ùå–ü–µ—Ä–µ–¥ –æ—Å—Ç. {item["Stops"]}. ‚ùó–í –ø–∞—Ä–∫ {item["EndStops"]}'
                    if (item["Position"] == "Stops"): str_data = f'‚ùå–û—Å—Ç. {item["Stops"]}. ‚ùó–í –ø–∞—Ä–∫ {item["EndStops"]}'
                    output_str.append(str_data)
                else:
                    if (item["Position"] == 'Between_Stops'):
                        str_data = f'‚¨áÔ∏è–ü–µ—Ä–µ–¥ –æ—Å—Ç. {item["Stops"]}'
                    if (item["Position"] == "Stops"): str_data = f'‚¨á–û—Å—Ç. {item["Stops"]}.'
                    output_str.append(str_data)
        output_str = ' \n'.join(output_str)
        return output_str
    else:
        return '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–æ—Ç –≤–∏–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.'

#—Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞, —Å–æ–∑–¥–∞–µ—Ç –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–¥–∞
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True,row_width=1)
    route = types.KeyboardButton("–¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
    markup.add(route)
    bot.send_message(message.chat.id,"–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º",reply_markup=markup)

#–ò—Å—Ö–æ–¥—è –∏–∑ json —Ñ–∞–π–ª–∞ –≤—ã–≤–æ–¥–∏—Ç –≤–∏–¥ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç –¥–ª—è –Ω–∏—Ö –∫–Ω–æ–ø–∫–∏
@bot.message_handler(content_types=['text'])
def choi—Åe_transport_type(message):
    message_b = ''
    with open('all_categories_dict.json', 'r') as file:#–≤—ã–≤–æ–¥–∏—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∞–≤—Ç —Ç—Ä–æ–ª —Ç—Ä–∞–º
        data = json.load(file)
    str_output = ', \n'.join(data.keys())

    mess_text = message.text
    if(mess_text == '–¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞'):
        markup = markup_Reply_transport_button()
        bot.send_message(message.chat.id,f"–í–∏–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:\n{str_output}",reply_markup=markup)

    if(mess_text in"–ê–≤—Ç–æ–±—É—Å" or mess_text in "–¢—Ä–æ–ª–ª–µ–π–±—É—Å" or mess_text in "–¢—Ä–∞–º–≤–∞–π"):
        for i in str_output.split(","):
            i = i.replace('\n', '').strip()
            if i.lower() == mess_text.lower():#–ü—Ä–æ–≤–µ—Ä—è—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
                str=f'data/{i}.json'
                with open(str, "r") as file:
                    data = json.load(file)
                str_output_number = ', '.join(data['response'].keys())
                markup = markup_Reply_num_transport_button(i)
                bot.send_message(message.chat.id,f"–í—Å–µ –Ω–æ–º–µ—Ä–∞({mess_text}):\n{str_output_number}\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥",reply_markup=markup)
                with open('background_message.json',"w") as file:
                    json.dump(message.json,file,indent=4,ensure_ascii=False)
                break

    if(message.text.isdigit()):
        with open('background_message.json', "r") as file:
            data = json.load(file)
        if (data['text'] in"–ê–≤—Ç–æ–±—É—Å" or data['text'] in "–¢—Ä–æ–ª–ª–µ–π–±—É—Å" or data['text'] in "–¢—Ä–∞–º–≤–∞–π"):
            ParserHTML.position(message.text, data['text'])
            with open("position.json","r") as file:
                dict = json.load(file)
            text = text_data_transport_position(dict)
            markup = markup_Reply_transport_button()
            bot.send_message(message.chat.id, f"–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:\n {text}", reply_markup=markup)
        else:
            markup = markup_Reply_transport_button()
            bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –≤–∏–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:\n{str_output}",reply_markup=markup)
    if(mess_text == '–ù–∞–∑–∞–¥'):
        markup = markup_Reply_transport_button()
        bot.send_message(message.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥", reply_markup=markup)
    if (mess_text == '–í –Ω–∞—á–∞–ª–æ'):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        route = types.KeyboardButton("–¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
        markup.add(route)
        bot.send_message(message.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –Ω–∞—á–∞–ª–æ", reply_markup=markup)


try:#–î–æ–ª–∂–Ω–æ –∏—Å–∫–ª—é—á–∞—Ç—å –ø–∞–¥–µ–Ω–∏–µ –±–æ—Ç–∞ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
    bot.polling(none_stop=True)
except Exception as e:
    print(e)

